function names_units = mrjson_load_all(json_list,varargin)
% function names_units = mrjson_load_all(json_list)
% function names_units = mrjson_load_all(json_list,outfile)
%
% *************************************************************************
% mexec interface for RVDAS data acquisition
% First drafts of scripts for start jc211 28 jan 2021, alongside in Stanley
%
% Evolution on that cruise by bak, ylf, pa
% *************************************************************************
%
% For each .json file in json_list, if it is not in the skips.table list
%   (set by setdef_cropt_uway and opt_cruise), load and call jsondecode,
%   then pass to mrjson_show, which will loop through the sentences (except
%   those matching the skips.sentences and skips.msg lists) and write out the
%   variables and units (except those matching the skips.var,
%   skips.sentence_var, skips.pat, skips.sentence_pat lists)
%
% Input: 
%   json_list, cell array or name of text file listing the .json files (and
%     paths, with or without extension) 
%   [optional] outfile, (path and) name of .m file to which to write
%     results
%
% Output:
%
% names_units : is a structure. Each field describes a table in rvdas.
%   The first call to mrshow_json writes, for example
%     names_units.posmv_pos_gpgga
%     names_units.posmv_pos_gpggk
%   The next call adds to names_units
%     names_units.posmv_gyro_prdid
%     names_units.posmv_gyro_pashr
%
% names_units has fieldnames that are rvdas table names
%   Each table name has fieldnames that are the variable names for that table
%   The contents of each variable name is a string equal to the variable units.

m_common

if nargin>1
    %write initial function-defining text to file
    outfile = varargin{1};
    fid = fopen(outfile,'w'); mfixperms(outfile);
    text_for_file = {'function rtables = mrtables_from_json';
        '% function rtables = mrtables_from_json';
        '% Make the list of rvdas tables that mexec may want to copy.';
        '% The rtables created in this script, along with mrnames_new, will';
        '% define which variables are loaded when a table is loaded from rvdas.';
        '% Units are collected from the json files.';
        '% Variables and/or tables can subsequently be commented out';
        '%';
        '% Examples';
        '%';
        '%   rtables= mrtables_from_json; %list of tables to use';
        '%   [rtables, ctables] = mrtables_from_json; %list of tables to use, and list of commented-out tables';
        '%';
        '% Input:';
        '%';
        '%   None';
        '%';
        '% Output:';
        '%';
        '% rtables is a structure. Each field is a cell array. The name of the';
        '%   is the rvdas table name. The content of each field is an Nx2 cell array.';
        '%   Element {1,1} is the rvdas table name. The remaining rows are the ';
        '%   variable names and units we are interested in. Variables we do not wish';
        '%   to grab from rvdas are commented out and may be listed by supplying the';
        '%   optional second output argument ctables.';
        ' '};
    fprintf(fid, '%s\n', text_for_file{:});
    fprintf(fid, '%\n % The content of this file was generated by mrjson_load_all.m for %s on %s\n',MEXEC_G.MSCRIPT_CRUISE_STRING,datestr(now));
    fclose(fid); mfixperms(outfile);
end

if ~iscell(json_list) %read in file
    if exist(json_list,'file')
        fidl = fopen(json_list,'r');
        json_list = {}; %fill in cell array instead, now we have file pointer
        while 1
            tl = fgetl(fidl);
            if ischar(tl) %line contains (presumably) a file name
                json_list = [json_list; tl];
            else
                break
            end
        end
        fclose(fidl);
    end
end

names_units = [];

%the .json files and messages to skip; defaults are mostly quality messages
%or those that are always repeats of information in other messages
clear skips
skips.msg = {'glgsv', ...
    'gndtm', 'gngsa', 'gngst', 'gnzda', ...
    'gpdtm', 'gpgsa', 'gpgst', 'gpgsv', ...
    'gprmc', 'gpzda', ...
    'heths', 'inzda', 'ppnsd', ...
    'pcrfs', 'pctnh'};
skips.pat = {'unitsOf', 'unitOf', 'Unit', 'des', 'geoid', 'dgnss', 'type', ...
    'magvar', 'status', 'vbw', 'depthfeet', 'fathom', 'messagecounter' 'pointselected' ...
    'magnetic' 'flag' 'hdop' 'ggaqual' 'version' 'device' 'header' ...
    'factor' 'decimals' 'totalflow' 'flowratepulses' ...
    };
skips.var = {'winchDatum' 'undefined' 'celsiusFlag' 'maxrangescale' ...
    'geoid' 'diffcAge' 'UTCDate' 'maxrange' 'trueheading' ...
    'truecourse' 'positioningmode' 'ggaqual' 'numsat' 'hdop' 'gllqual' ...
    'selftest' 'testmode' 'spare' 'checksum' 'syncbyte2' ...
    'identity' 'serialnumber' ...
    'flowratedecimals' 'flowratekfactordecimals'};
skips.sentence_var = {};
skips.table = {};
skips.sentence = {};
skips.sentence_pat = {};
switch MEXEC_G.Mship
    case 'discovery'
        %skips.table = [skips.table '10_at1m_uw' 'at1m_u12_uw' ...
        %    'air2sea_gravity' 'air2sea_s84' ...
        %    'posmv_att' 'posmv_gyro' 'seaspy'];
        skips.sentence = [skips.sentence 'phins_pixseutmwgs' 'phins_att_pixsepositi', 'phins_att_pixsespeed', 'phins_att_pixseutmwgs',...
            'phins_att_pixsetime', 'phins_att_pixsestdhrp', 'phins_att_pixsestdpos',...
            'phins_att_pixsestdspd', 'phins_att_pixseutcin', 'phins_att_pixsegp2in', ...
            'phins_att_pixsealgsts', 'phins_att_pixsestatus', 'phins_att_pixseht0sts', 'posmv_gpgll'];
    case 'cook'
        %skips.table = [skips.table 'airsea2', 'gravat1m', 'ranger2usbl', 'seaspy2', 'slogchernikeef', 'rex2'];
        skips.sentence = [skips.sentence 'cnav_gngll', 'cnav_gnrmc', 'posmv_prdid', ...
            'seapathatt_ingga', 'seapathatt_psxn20', 'seapathgps_inrmc', 'seapathgps_ingll'...
            'sgyro_hchdm', 'ea640_sddbs'];
        skips.msg = [skips.msg, 'rex2_3rr0r'];
    case 'sda'
%         sentence_skip = [sentence_skip, 'singlebeam_skipper_gds_102_sddpt', 'singlebeam_skipper_gds102_sddbs',...
%             'singlebeam_skipper_gds102_sddbk', 'singlebeam_skipper_gds102_pskpdpt', 'singlebeam_skipper_gds102_sdalr',...
%             'gnss_saab_r5_supreme_gnrmc']; %skipped at mrnames stage
        skips.sentence_var = [skips.sentence_var, 'sd025_transmissometer_wetlabs_cstar_ucsw1_pwltran1_reference', ...
            'sd025_transmissometer_wetlabs_cstar_ucsw1_pwltran1_signal', 'sd025_transmissometer_wetlabs_cstar_ucsw1_pwltran1_correctedsignal'];
    otherwise
end
opt1 = 'ship'; opt2 = 'rvdas_skip'; get_cropt

%loop through .json files
for jno = 1:length(json_list)

    [fp,fname,~] = fileparts(json_list{jno});

    %skip this table?
    ii = strfind(fname,'-');
    if ~isempty(ii) && sum(strncmpi(fname(1:ii(1)-1),skips.table,ii(1)-1))
        continue 
    end
    
    jdata = [];
    fidd = fopen(fullfile(fp,[fname '.json']),'r');
    while 1
        td = fgetl(fidd);
        if ischar(td)
            jdata = [jdata td];
        else
            break
        end
    end
    fclose(fidd);

    js = jsondecode(jdata(:)');
    %compare to table_skip again in case file names don't match id field
    if sum(strncmpi(js.id,skips.table,length(js.id)))
        continue
    end

    js.filename = fname;
    if exist('outfile','var')
        names_units = mrjson_show(js, names_units, outfile, skips);
    else
        names_units = mrjson_show(js, names_units, '', skips);
    end

end


function names_units = mrjson_show(js,names_units,outfile,skips)
% function names_units = mrjson_show(js,names_units,outfile,skips)
%
% *************************************************************************
% mexec interface for RVDAS data acquisition
% First drafts of scripts for start jc211 28 jan 2021, alongside in Stanley
% 
% Evolution on that cruise by bak, ylf, pa
% *************************************************************************
%
% Show the sentences in the rvdas json file (via .mat or structure via
% jsondecode), and store variable names and units.
%
%
% Input:
%
% js is a structure generated by jsondecode
%
% if names_units is a structure, the output names_units is added to the
%   input; if empty, it is initialised
% if outfile is not empty, write outfile, else write to screen
% 
% Output:
% 
% to outfile if specified, else to screen: The relevant content of the js
%   structure loaded from the sentences in a json file;
%   variables set (by cruise options) to be skipped (those matching the
%   skips.var, skips.pat, skips.sentence_var, skips.sentence_pat lists)
%   will be omitted from names_units and commented out in outfile
%
% names_units : is a structure. Each field describes a table in rvdas.
%   The function writes, for example
%     names_units.posmv_pos_gpgga
%     names_units.posmv_pos_gpggk
%   If the next call has names_units as an input argument, the next set of
%        tables from the next json/mat file will be added.
%     names_units.posmv_gyro_prdid
%     names_units.posmv_gyro_pashr

% names_units has fieldnames that are rvdas table names
%   Each table name has fieldnames that are the variable names for that
%   table; each variable name has two fields, units and long_name, whose
%   contents are the variable units and long name (js.sentences.name)

if isempty(names_units)
    clear names_units
end

if ~isempty(outfile)
    fid = fopen(outfile,'a');
else
    fid = 1;
end

n_sentences = length(js.sentences);
id = js.id; id = lower(id);
fprintf(fid,'\n\n%s%s %2d%s\n','%',js.filename,n_sentences,'  sentences');

opt1 = 'ship'; opt2 = 'rvdas_form'; get_cropt
if use_cruise_views
    sqlpre = [view_name '_'];
else
    sqlpre = '';
end

for ks = 1:n_sentences

    s = js.sentences(ks);
    jsonname = s.name;
    talkId = s.talkId;
    messageId = s.messageId;
    noflds = length(s.field); %s.fieldNo;
    msg = lower([talkId messageId]);
    sqlname = [sqlpre id '_' msg];
    %skip this sentence?
    if sum(strcmpi(msg,skips.msg)) || sum(strcmpi(sqlname,skips.sentence))
        continue
    end

    str = ['rtables.' sqlname ' = {  % from ' js.filename '.json'];
    fprintf(fid,'\n%s%s%s%s\n','%','"',jsonname,'"'); % make this output a comment for cut and paste
    fprintf(fid,'%s\n',str);
    fprintf(fid,'%s %2d %s %s\n',['''' sqlname ''''],noflds,'[]',' % fields');

    for kf = 1:noflds
        sf = s.field(kf);
        if iscell(sf)
            f = s.field{kf};
        else
            f = s.field(kf);
        end
        fname = f.fieldNumber;
        if isfield(f,'units'); funit = f.units; else; funit = f.unit; end
        
        skipit = false;
        if ~isempty(skips.var)
            skipit = skipit || sum(strcmpi(fname,skips.var));
        end
        if ~isempty(skips.sentence_var)
            skipit = skipit || sum(strcmpi([sqlname '_' fname],skips.sentence_var));
        end
        if ~isempty(skips.sentence_pat)
            skipit = skipit || sum(contains([sqlname '_' fname],skips.sentence_pat,'IgnoreCase',true));
        end
        if ~isempty(skips.pat)
            skipit = skipit || sum(contains(fname,skips.pat,'IgnoreCase',true));
        end
        if skipit
            fprintf(fid,'%s %28s %30s\n','%',['''' fname ''''],['''' funit '''']);
        else
            fprintf(fid,'%30s %30s\n',['''' fname ''''],['''' funit '''']);
            try
                names_units.(sqlname).(fname).units = funit; % will fail if sqlname or fname are invalid. Some gravity meter json files define names that are invalid matab names, eg with spaces and starting with a number
            catch
                sqlname = matlab.lang.makeValidName(sqlname);
                fname = matlab.lang.makeValidName(fname);
                names_units.(sqlname).(fname).unit = funit;
            end
        end
    end
    fprintf(fid,'%s\n','};');
    
end
if fid~=1; fclose(fid); end

