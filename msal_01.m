% msal_01: read in the bottle salinities from digitized autosal logs
%
% Use: msal_01        and then respond with station number, or for station 16
%      stn = 16; msal_01;
% 
% read in data from the concatenated bottle salinity file
% and save to sal_cruise_stn.nc
%
% calls msal_standardise_avg to
%    read in input file(s),
%    compute (or extract from opt_cruise) fields not set in the input files
%    plot and flag standards
%    apply offsets
%    plot and flag samples
%
%   uses gsw: salinity = gsw_SP_salinometer((runavg+offset)/2, cellT);

minit; scriptname = mfilename;
mdocshow(scriptname, ['loads bottle salinities from the concatenated file specified in opt_' mcruise ' (generated by running msal_standardise_avg) and writes to sal_' mcruise '_' stn_string '.nc']);

% resolve root directories for various file types
root_sal = mgetdir('M_BOT_SAL');
otfile2 = [root_sal '/sal_' mcruise '_' stn_string];
oopt = 'indata'; get_cropt %file to load

%get the standardised salinity sample dataset for this station
fname = [root_sal '/' sal_mat_file]; runmssa = 0;
if exist(fname, 'file')
    load(fname, 'ds_sal')
    if sum(floor(ds_sal.sampnum/100)==stnlocal)==0
       runmssa = 1;
    end
else
    runmssa = 1;
end
if runmssa
    msal_standardise_avg
    load(fname, 'ds_sal')
end

ii = find(floor(ds_sal.sampnum/100)==stnlocal);
ds_sal = ds_sal(ii,:);

%assign to variables
station = repmat(stnlocal, 24, 1);
salbot = [1:24]';

sampnum = 100*station + salbot;
sampnuma = ds_sal.sampnum;
sampnuma(sampnuma<=0) = NaN; %these are TSG samples

[c, ia, ib] = intersect(sampnum, sampnuma);
runavg = NaN+zeros(size(station)); runavg(ia) = ds_sal.rval(ib);
flag = 9+zeros(size(station)); flag(ia) = ds_sal.flag(ib); %flags default to no data
cellT = NaN+zeros(size(station)); cellT(ia) = ds_sal.cellT(ib); 
offs = NaN+zeros(size(station)); offs(ia) = ds_sal.offset(ib);
salinity = gsw_SP_salinometer(runavg/2, cellT); %changed on JC103 in rapid branch, after JR16002 in JCR branch
salinity_adj = gsw_SP_salinometer((runavg+offs)/2, cellT);
sal_adj_comment_string = ['Adjustments calculated by msal_standardise_avg'];

%set any different/additional flags (besides those set in sal_standardise_avg)
oopt = 'flags'; get_cropt
flag(isnan(salinity_adj) & flag<4) = 4;

dataname = ['sal_' mcruise '_' stn_string];

% now load the data to an array and assign variable names
varnames={'station','salbot','runavg','salinity','sampnum', 'flag'};
varunits={'number','number','number','pss-78','number','woce table'};

varnames=[varnames 'salinity_adj'];
varunits=[varunits 'pss-78'];

% sorting out units for msave

varnames_units = {};
for k = 1:length(varnames)
    varnames_units = [varnames_units; varnames(k)];
    varnames_units = [varnames_units; {'/'}];
    varnames_units = [varnames_units; varunits(k)];
end

timestring = ['[' sprintf('%d %d %d %d %d %d',MEXEC_G.MDEFAULT_DATA_TIME_ORIGIN) ']'];

%--------------------------------
MEXEC_A.MARGS_IN_1 = {
    otfile2
    };
MEXEC_A.MARGS_IN_2 = varnames(:);
MEXEC_A.MARGS_IN_3 = {
    ' '
    ' '
    '1'
    dataname
    '/'
    '2'
    MEXEC_G.PLATFORM_TYPE
    MEXEC_G.PLATFORM_IDENTIFIER
    MEXEC_G.PLATFORM_NUMBER
    '/'
    '4'
    timestring
    '/'
    '7'
    '-1'
    sal_adj_comment_string
    ' '
    ' '
    '8'
    };
MEXEC_A.MARGS_IN_4 = varnames_units(:);
MEXEC_A.MARGS_IN_5 = {
    '-1'
    '-1'
    };
MEXEC_A.MARGS_IN = [MEXEC_A.MARGS_IN_1; MEXEC_A.MARGS_IN_2; MEXEC_A.MARGS_IN_3; MEXEC_A.MARGS_IN_4; MEXEC_A.MARGS_IN_5];
msave
%--------------------------------
